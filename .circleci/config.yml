# Before using this config file please read documentation about our CI
# https://github.com/shopsys/shopsys/tree/master/docs/orchestration/why-we-use-kubernetes.md

# Environment variables needs to be set in project settings in circle ci

#   - $DOCKER_USERNAME           : your login to docker hub
#   - $DOCKER_PASSWORD           : your password to docker hub
#   - $KUBERNETES_CONFIG_FILE    : content of ~/.kube/config file on cluster
#   - $DEVELOPMENT_SERVER_DOMAIN : domain name of your server where you want to deploy your application

version: 2
jobs:
  deploy_to_cluster:
    docker:
    - image: shopsys/kubernetes-buildpack:latest
      auth:
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
    working_directory: ~/source
    steps:
    - setup_remote_docker
    - checkout

    - run:
        name: Login to Docker hub
        command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin

    - run:
        name: Setup Kubernetes cluster connection
        command: |
          mkdir -p ~/.kube
          echo -e $KUBERNETES_CONFIG_FILE > ~/.kube/config
    - run:
        name: Set hostnames into Kubernetes manifests
        command: |
          FIRST_DOMAIN_HOSTNAME=$CIRCLE_BRANCH.$DEVELOPMENT_SERVER_DOMAIN
          SECOND_DOMAIN_HOSTNAME=2.$CIRCLE_BRANCH.$DEVELOPMENT_SERVER_DOMAIN

          yq write --inplace ingress.yml spec.rules[0].host $FIRST_DOMAIN_HOSTNAME
          yq write --inplace ingress.yml spec.rules[1].host $SECOND_DOMAIN_HOSTNAME

          yq write --inplace deployments/webserver.yml spec.template.spec.hostAliases[0].hostnames[2] $FIRST_DOMAIN_HOSTNAME
          yq write --inplace deployments/webserver.yml spec.template.spec.hostAliases[0].hostnames[3] $SECOND_DOMAIN_HOSTNAME
        working_directory: project-base/k8s

    - run:
        name: Replace docker images in deployment definition
        command: |
          yq write --inplace deployments/webserver.yml spec.template.spec.containers[0].image $DOCKER_USERNAME/php-fpm:$CIRCLE_SHA1
          yq write --inplace deployments/webserver.yml spec.template.spec.initContainers[0].image $DOCKER_USERNAME/php-fpm:$CIRCLE_SHA1
          yq write --inplace deployments/microservice-product-search.yml spec.template.spec.containers[0].image $DOCKER_USERNAME/microservice-product-search:$CIRCLE_SHA1
          yq write --inplace deployments/microservice-product-search-export.yml spec.template.spec.containers[0].image $DOCKER_USERNAME/microservice-product-search-export:$CIRCLE_SHA1
        working_directory: project-base/k8s

    - run:
        name: Create configmap manifests
        command: |
          kubectl create configmap nginx-configuration --from-file ../../docker/nginx/nginx.conf --dry-run --output=yaml > nginx-configuration.yml
          kubectl create configmap php-configuration --from-file ../docker/php-fpm/php-ini-overrides.ini --dry-run --output=yaml > php-configuration.yml
          kubectl create configmap product-search-php-configuration --from-file ../../microservices/product-search/docker/php-ini-overrides.ini --dry-run --output=yaml > product-search-php-configuration.yml
          kubectl create configmap product-search-export-php-configuration --from-file ../../microservices/product-search-export/docker/php-ini-overrides.ini --dry-run --output=yaml > product-search-export-php-configuration.yml
        working_directory: project-base/k8s

    - run:
        name: Setup domain a parameters files
        command: |
          cp project-base/app/config/domains_urls.yml.dist project-base/app/config/domains_urls.yml
          cp project-base/app/config/parameters_test.yml.dist project-base/app/config/parameters_test.yml
          cp project-base/app/config/parameters.yml.dist project-base/app/config/parameters.yml
          FIRST_DOMAIN_HOSTNAME=$CIRCLE_BRANCH.$DEVELOPMENT_SERVER_DOMAIN:$NGINX_INGRESS_CONTROLLER_HOST_PORT
          SECOND_DOMAIN_HOSTNAME=2.$CIRCLE_BRANCH.$DEVELOPMENT_SERVER_DOMAIN:$NGINX_INGRESS_CONTROLLER_HOST_PORT
          yq write --inplace project-base/app/config/domains_urls.yml domains_urls[0].url http://$FIRST_DOMAIN_HOSTNAME
          yq write --inplace project-base/app/config/domains_urls.yml domains_urls[1].url http://$SECOND_DOMAIN_HOSTNAME

    - run:
        name: Build project base docker image
        command: |
          docker image pull $DOCKER_USERNAME/php-fpm:$CIRCLE_SHA1 || (docker image build \
            --build-arg github_oauth_token=$GITHUB_OAUTH_TOKEN \
            --tag $DOCKER_USERNAME/php-fpm:$CIRCLE_SHA1 \
            --tag $DOCKER_USERNAME/php-fpm:latest \
            -f project-base/docker/php-fpm-deployment/Dockerfile . && \
          # Push image into docker registry
          docker image push $DOCKER_USERNAME/php-fpm:$CIRCLE_SHA1 &&
          docker image push $DOCKER_USERNAME/php-fpm:latest)

    - run:
        name: Build microservices product-search-export image
        command: |
            docker image pull $DOCKER_USERNAME/microservice-product-search-export:$CIRCLE_SHA1 || (docker image build \
              --build-arg github_oauth_token=$GITHUB_OAUTH_TOKEN \
              --tag $DOCKER_$DOCKER_USERNAME/microservice-product-search-export:$CIRCLE_SHA1 \
              --tag $DOCKER_$DOCKER_USERNAME/microservice-product-search-export:latest \
              -f Dockerfile . && \
            # Push image into docker registry
            docker image push $DOCKER_USERNAME/microservice-product-search-export:$CIRCLE_SHA1 &&
            docker image push $DOCKER_USERNAME/microservice-product-search-export:latest)
        working_directory: microservices/product-search-export

    - run:
        name: Build microservices product-search image
        command: |
            docker image pull $DOCKER_USERNAME/microservice-product-search:$CIRCLE_SHA1 || (docker image build \
              --build-arg github_oauth_token=$GITHUB_OAUTH_TOKEN \
              --tag $DOCKER_$DOCKER_USERNAME/microservice-product-search:$CIRCLE_SHA1 \
              --tag $DOCKER_$DOCKER_USERNAME/microservice-product-search:latest \
              -f Dockerfile . && \
            # Push image into docker registry
            docker image push $DOCKER_USERNAME/microservice-product-search:$CIRCLE_SHA1 &&
            docker image push $DOCKER_USERNAME/microservice-product-search:latest)
        working_directory: microservices/product-search

    - run:
        name: Deploy application to Kubernetes cluster
        command: |
          kubectl delete namespace $CIRCLE_BRANCH || true
          kubectl create namespace $CIRCLE_BRANCH
          kubectl config set-context $(kubectl config current-context) --namespace=$CIRCLE_BRANCH
          kubectl apply --recursive -f .
        working_directory: project-base/k8s
        # Storing k8s config and application config as artifacts due to changes done to these files during build process
    - store_artifacts:
        path: project-base/k8s
    - store_artifacts:
        path: project-base/app/config

    - run:
        name: Wait for rollouts
        command: |
          kubectl rollout status deployment/adminer --watch
          kubectl rollout status deployment/elasticsearch --watch
          kubectl rollout status deployment/postgres --watch
          kubectl rollout status deployment/redis --watch
          kubectl rollout status deployment/redis-admin --watch
          kubectl rollout status deployment/selenium-server --watch
          kubectl rollout status deployment/smtp-server --watch
          kubectl rollout status deployment/webserver --watch
          kubectl rollout status deployment/microservice-product-search --watch
          kubectl rollout status deployment/microservice-product-search-export --watch

    - run:
        name: Create databases, build application and run tests
        command: |
          PHP_FPM_POD=$(kubectl get pods -l app=webserver -o=jsonpath='{.items[0].metadata.name}')
          kubectl exec $PHP_FPM_POD -c php ./phing db-create test-db-create build-demo-ci tests-acceptance

    - run:
        name: Delete containers
        command: |
            kubectl delete namespace $CIRCLE_BRANCH || true

workflows:
  version: 2
  deployment:
    jobs:
    - deploy_to_cluster:
        # Filter all tags from building
        filters:
          tags:
            ignore: /.*/
